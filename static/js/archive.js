document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const themeToggle = document.getElementById('themeToggle');
    const body = document.body;
    const triggerXLSXModalBtn = document.getElementById('triggerXLSXModalBtn');
    const xlsxModal = document.getElementById('xlsxModal');
    const confirmXLSXBtn = document.getElementById('confirmXLSXBtn');
    const cancelXLSXBtn = document.getElementById('cancelXLSXBtn');
    const templateSelectForXLSX = document.getElementById('templateSelectForXLSX');
    const separatorSection = document.getElementById('separatorSection');
    const separatorSelect = document.getElementById('separatorSelect');
    const templateSelect = document.getElementById('templateSelect');
    const articleSelect = document.getElementById('articleSelect');
    const urlList = document.getElementById('urlList');
    const archiveTitle = document.getElementById('archiveTitle');
    const bulkActions = document.getElementById('bulkActions');
    const copyAllBtn = document.getElementById('copyAllBtn');
    const copyAllListBtn = document.getElementById('copyAllListBtn');
    const showAllBtn = document.getElementById('showAllBtn');

    // –î–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let articleData = {};
    let currentTemplate = '';
    let currentArticle = '';

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initArchive();

    function initArchive() {
        initTheme();
        processImageData();
        initEventListeners();
    }

    function initTheme() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
            body.classList.add('dark-theme');
            themeToggle.textContent = '‚òÄÔ∏è';
        } else {
            themeToggle.textContent = 'üåô';
        }

        themeToggle.addEventListener('click', toggleTheme);
    }

    function toggleTheme() {
        body.classList.toggle('dark-theme');
        if (body.classList.contains('dark-theme')) {
            themeToggle.textContent = '‚òÄÔ∏è';
            localStorage.setItem('theme', 'dark');
        } else {
            themeToggle.textContent = 'üåô';
            localStorage.setItem('theme', 'light');
        }
    }

    function processImageData() {
        if (imageData && Array.isArray(imageData)) {
            imageData.forEach(item => {
                const template = item.template;
                const article = item.article;
                if (!articleData[template]) {
                    articleData[template] = {};
                }
                if (!articleData[template][article]) {
                    articleData[template][article] = [];
                }
                articleData[template][article].push({
                    url: item.url,
                    filename: item.filename,
                    thumbnail_url: item.thumbnail_url
                });
            });


    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    Object.keys(articleData).forEach(template => {
        const sortedArticles = {};
        Object.keys(articleData[template]).sort().forEach(article => {
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
            sortedArticles[article] = articleData[template][article].sort((a, b) => {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                // –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: <–∞—Ä—Ç–∏–∫—É–ª>_<–Ω–æ–º–µ—Ä>_<—Ö–µ—à>.<—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ>
                // –ü—Ä–∏–º–µ—Ä: 4296278785_2_ffe8e5.jpg -> –∏–∑–≤–ª–µ–∫–∞–µ–º '2'
                const matchA = a.filename.match(/_(\d+)_[a-f0-9]+\.\w+$/);
                const matchB = b.filename.match(/_(\d+)_[a-f0-9]+\.\w+$/);

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ 0, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                const numA = matchA ? parseInt(matchA[1], 10) : 0;
                const numB = matchB ? parseInt(matchB[1], 10) : 0;

                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
                return numA - numB;
            });
        });
        articleData[template] = sortedArticles;
    });

            populateTemplateList();
        }
    }

    function populateTemplateList() {
        templateSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º --</option>';
        Object.keys(articleData).forEach(templateName => {
            const option = document.createElement('option');
            option.value = templateName;
            option.textContent = templateName;
            templateSelect.appendChild(option);
        });
    }

    function populateArticleList(templateName) {
        if (!templateName || !articleData[templateName]) {
            articleSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª --</option>';
            articleSelect.disabled = true;
            return;
        }

        articleSelect.innerHTML = '<option value="">-- –í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã --</option>';
        Object.keys(articleData[templateName]).forEach(articleName => {
            const option = document.createElement('option');
            option.value = articleName;
            option.textContent = articleName;
            articleSelect.appendChild(option);
        });
        articleSelect.disabled = false;
    }

    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    function displayTemplateUrls(templateName) {
        if (!templateName || !articleData[templateName]) {
            urlList.innerHTML = '';
            archiveTitle.textContent = '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω';
            bulkActions.style.display = 'none';
            return;
        }

        const urlsByArticle = articleData[templateName];
        archiveTitle.textContent = `–ê–ª—å–±–æ–º: ${templateName}`;
        urlList.innerHTML = '';

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞—Ä—Ç–∏–∫—É–ª–∞–º –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        Object.entries(urlsByArticle).forEach(([articleName, items]) => {
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–∞
            const articleHeader = document.createElement('div');
            articleHeader.className = 'article-info';
            articleHeader.textContent = `–ê—Ä—Ç–∏–∫—É–ª: ${articleName}`;
            urlList.appendChild(articleHeader);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞
            items.forEach(item => {
                const urlItem = createUrlItem(item, articleName, templateName);
                urlList.appendChild(urlItem);
            });
        });

        bulkActions.style.display = 'flex';
    }

    // –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¢–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∏–±–æ –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∫–∞—Ç–∞–ª–æ–≥–∞, –ª–∏–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
    function displayUrls(templateName, articleName = '') {
        if (!templateName || !articleData[templateName]) {
            urlList.innerHTML = '';
            archiveTitle.textContent = '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω';
            bulkActions.style.display = 'none';
            return;
        }

        if (articleName && articleData[templateName][articleName]) {
            // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
            const urls = articleData[templateName][articleName];
            archiveTitle.textContent = `–ö–∞—Ç–∞–ª–æ–≥: ${templateName}, –ê—Ä—Ç–∏–∫—É–ª: ${articleName}`;
            urlList.innerHTML = '';

            urls.forEach(item => {
                const urlItem = createUrlItem(item, articleName, templateName);
                urlList.appendChild(urlItem);
            });
        } else {
            // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∫–∞—Ç–∞–ª–æ–≥–∞
            displayTemplateUrls(templateName);
        }

        bulkActions.style.display = 'flex';
    }

    function displayAllUrls() {
        urlList.innerHTML = '';
        archiveTitle.textContent = '–í—Å–µ —Å—Å—ã–ª–∫–∏';

        const groupedUrls = {};
        if (imageData && Array.isArray(imageData)) {
            imageData.forEach(item => {
                if (!groupedUrls[item.article]) {
                    groupedUrls[item.article] = [];
                }
                groupedUrls[item.article].push(item);
            });
        }

        Object.entries(groupedUrls).forEach(([articleName, items]) => {
            const articleHeader = document.createElement('div');
            articleHeader.className = 'article-info';
            articleHeader.textContent = `–®–∞–±–ª–æ–Ω: ${items[0].template}, –ê—Ä—Ç–∏–∫—É–ª: ${articleName}`;
            urlList.appendChild(articleHeader);

            items.forEach(item => {
                const urlItem = createUrlItem(item, articleName, item.template);
                urlList.appendChild(urlItem);
            });
        });

        bulkActions.style.display = 'flex';

        // –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        templateSelect.value = '';
        articleSelect.value = '';
        articleSelect.disabled = true;
        currentTemplate = '';
        currentArticle = '';
    }

    function createUrlItem(item, articleName, templateName) {
        const urlItem = document.createElement('div');
        urlItem.className = 'url-item';
        urlItem.innerHTML = `
            <div class="preview-container">
                <img
                    src="${item.thumbnail_url || item.url}"
                    alt="Preview ${item.filename}"
                    class="image-preview"
                    loading="lazy"
                    onerror="this.onerror=null; this.src='${item.url}';"
                >
            </div>
            <div class="url-content">
                <div class="url-text" data-url="${item.url}">
                    ${item.url}
                    <span class="copy-hint">üîó –ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
                </div>
                <small style="color: var(--label-color); margin-top: 5px; display: block;">${item.filename}</small>
            </div>
            <button class="delete-btn" data-url="${item.url}" title="–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª—ã">
                üóëÔ∏è
            </button>
        `;
        return urlItem;
    }

    function initEventListeners() {
        // –°–µ–ª–µ–∫—Ç—ã
        templateSelect.addEventListener('change', handleTemplateChange);
        articleSelect.addEventListener('change', handleArticleChange);
        showAllBtn.addEventListener('click', displayAllUrls);

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ XLSX
        if (triggerXLSXModalBtn) {
            triggerXLSXModalBtn.addEventListener('click', () => xlsxModal.style.display = 'block');
        }
        if (confirmXLSXBtn) {
            confirmXLSXBtn.addEventListener('click', handleXLSXGeneration);
        }
        if (cancelXLSXBtn) {
            cancelXLSXBtn.addEventListener('click', closeXLSXModal);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        if (templateSelectForXLSX) {
            templateSelectForXLSX.addEventListener('change', function() {
                if (this.value === '–í —è—á–µ–π–∫—É') {
                    separatorSection.style.display = 'block';
                } else {
                    separatorSection.style.display = 'none';
                }
            });
        }

        // –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if (copyAllBtn) copyAllBtn.addEventListener('click', copyAllToClipboard);
        if (copyAllListBtn) copyAllListBtn.addEventListener('click', copyAllListToClipboard);

        // –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('click', handleUrlClick);
        document.addEventListener('click', handleDeleteClick);
        window.addEventListener('click', handleWindowClick);
    }

    function handleTemplateChange() {
        const selectedTemplate = this.value;
        currentTemplate = selectedTemplate;
        populateArticleList(selectedTemplate);

        if (selectedTemplate) {
            // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª—ã
            displayUrls(selectedTemplate);
        } else {
            urlList.innerHTML = '';
            archiveTitle.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥';
            bulkActions.style.display = 'none';
            articleSelect.disabled = true;
        }
    }

    function handleArticleChange() {
        const selectedArticle = this.value;
        currentArticle = selectedArticle;

        if (currentTemplate) {
            // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ, –ø—Ä–∏ —Å–±—Ä–æ—Å–µ - –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∫–∞—Ç–∞–ª–æ–≥–∞
            displayUrls(currentTemplate, selectedArticle);
        } else {
            urlList.innerHTML = '';
            archiveTitle.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥';
            bulkActions.style.display = 'none';
        }
    }

    function closeXLSXModal() {
        xlsxModal.style.display = 'none';
        templateSelectForXLSX.value = '';
        separatorSection.style.display = 'none';
        separatorSelect.value = 'comma';
    }

    function handleXLSXGeneration() {
        const selectedTemplate = templateSelectForXLSX.value;
        let separator = 'comma'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        if (selectedTemplate === '–í —è—á–µ–π–∫—É') {
            separator = separatorSelect.value;
        }

        if (selectedTemplate) {
            closeXLSXModal();
            downloadXLSXDocument(selectedTemplate, separator);
        } else {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω.', 'error');
        }
    }

    function handleWindowClick(event) {
        if (event.target === xlsxModal) closeXLSXModal();
    }

    function showNotification(message, type = 'success') {
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notif => notif.remove());

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: var(--${type === 'success' ? 'notification-success' : 'notification-error'});
            color: white;
            border-radius: 5px;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        `;
        document.body.appendChild(notification);

        setTimeout(() => notification.remove(), 3000);
    }

    function copyToClipboard(text) {
        if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText(text).then(() => {
                showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ Clipboard API:', err);
                fallbackCopyTextToClipboard(text);
            });
        } else {
            fallbackCopyTextToClipboard(text);
        }
    }

    function fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 2em;
            height: 2em;
            padding: 0;
            border: none;
            outline: none;
            boxShadow: none;
            background: transparent;
            color: transparent;
        `;
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();

        try {
            const successful = document.execCommand('copy');
            if (successful) {
                showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            } else {
                showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ execCommand: ', err);
            showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        }
        document.body.removeChild(textArea);
    }

    function copyAllToClipboard() {
        const urlItems = document.querySelectorAll('#urlList .url-text');
        if (!urlItems.length) {
            showNotification('–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
            return;
        }

        const allUrls = Array.from(urlItems).map(item => item.getAttribute('data-url')).join(', ');
        copyToClipboard(allUrls);
    }

    function copyAllListToClipboard() {
        const urlItems = document.querySelectorAll('#urlList .url-text');
        if (!urlItems.length) {
            showNotification('–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
            return;
        }

        const allUrls = Array.from(urlItems)
            .map(item => item.getAttribute('data-url'))
            .join('\n');
        copyToClipboard(allUrls);
    }

    function handleUrlClick(e) {
        if (e.target.classList.contains('url-text')) {
            if (e.target.querySelector('.copy-hint') === e.target) return;

            const url = e.target.getAttribute('data-url');
            if (url) {
                copyToClipboard(url);
                e.target.classList.add('copied');
                setTimeout(() => e.target.classList.remove('copied'), 2000);
            }
        }
    }

    function downloadXLSXDocument(selectedTemplateName, separator = 'comma') {
        // –í–º–µ—Å—Ç–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å DOM, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π imageData
        // –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –µ–≥–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º (–∞–ª—å–±–æ–º/–∞—Ä—Ç–∏–∫—É–ª)
        let filteredData = imageData;

        if (!filteredData || !Array.isArray(filteredData)) {
            showNotification('–ù–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞', 'error');
            return;
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–ª—å–±–æ–º—É (template)
        if (currentTemplate) {
            filteredData = filteredData.filter(item => item.template === currentTemplate);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É (article)
        if (currentArticle) {
            filteredData = filteredData.filter(item => item.article === currentArticle);
        }

        if (filteredData.length === 0) {
            showNotification('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞', 'error');
            return;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, —á—Ç–æ –∏ –≤ processImageData
        const sortedData = [...filteredData].sort((a, b) => {
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (–∫–∞–∫ —Å—Ç—Ä–æ–∫–µ)
            if (a.article < b.article) return -1;
            if (a.article > b.article) return 1;
            // –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª—ã —Ä–∞–≤–Ω—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            const matchA = a.filename.match(/_(\d+)_[a-f0-9]+\.\w+$/);
            const matchB = b.filename.match(/_(\d+)_[a-f0-9]+\.\w+$/);
            const numA = matchA ? parseInt(matchA[1], 10) : 0;
            const numB = matchB ? parseInt(matchB[1], 10) : 0;
            return numA - numB;
        });

        // –¢–µ–ø–µ—Ä—å sortedData —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        // –§–æ—Ä–º–∏—Ä—É–µ–º imageDataToSend –∏–∑ —ç—Ç–æ–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const imageDataToSend = sortedData.map(item => ({
            url: item.url,
            article: item.article, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            filename: item.filename
        }));

        if (!selectedTemplateName.trim()) {
            showNotification('–ò–º—è —à–∞–±–ª–æ–Ω–∞ –ø—É—Å—Ç–æ–µ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω.', 'error');
            return;
        }

        showNotification('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è XLSX –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞: ' + selectedTemplateName, 'success');

        fetch('/admin/download-xlsx', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                image_data: imageDataToSend, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                template_name: selectedTemplateName,
                separator: separator  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(err.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞') });
            }
            return response.blob();
        })
        .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
            a.download = `${selectedTemplateName}_${separator === 'newline' ? '–ø–µ—Ä–µ–Ω–æ—Å' : '–∑–∞–ø—è—Ç—ã–µ'}_${timestamp}.xlsx`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            showNotification('XLSX –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–∫–∞—á–∞–Ω!', 'success');
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XLSX:', error);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XLSX: ' + error.message, 'error');
        });
    }

    function deleteImage(imageUrl, urlItemElement) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ? –§–∞–π–ª—ã –∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.')) {
            return;
        }

        const deleteBtn = urlItemElement.querySelector('.delete-btn');
        const originalText = deleteBtn.innerHTML;
        deleteBtn.innerHTML = '‚è≥';
        deleteBtn.disabled = true;

        fetch('/admin/delete-image', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ image_url: imageUrl })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                urlItemElement.remove();
                showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', 'success');

                const remainingItems = document.querySelectorAll('.url-item');
                if (remainingItems.length === 0) {
                    setTimeout(() => window.location.reload(), 1000);
                }
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + error.message, 'error');
            deleteBtn.innerHTML = originalText;
            deleteBtn.disabled = false;
        });
    }

    function handleDeleteClick(e) {
        if (e.target.classList.contains('delete-btn')) {
            const imageUrl = e.target.getAttribute('data-url');
            const urlItem = e.target.closest('.url-item');
            if (imageUrl && urlItem) {
                deleteImage(imageUrl, urlItem);
            }
        }
    }
});
